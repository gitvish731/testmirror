import http from 'k6/http';
import { check, sleep } from 'k6';
import { open } from 'k6/io';
export { handleSummary } from '../vendor/handleSummary.js';

// ---------- ENV / Defaults ----------
const ENV            = (__ENV.ENV || 'dev').toLowerCase();
const FEATURES_RAW   = __ENV.FEATURES || '';
const ENDPOINT_FILTER= __ENV.ENDPOINT_FILTER || '';
const BASE_URL       = (__ENV.BASE_URL || '').trim();
const TOKEN          = (__ENV.TOKEN || '').trim();
const DURATION       = __ENV.DURATION || '30s';
const RPS            = Number(__ENV.RPS || '1');
const PREALLOC       = Number(__ENV.PREALLOC || '6');
const MAXVUS         = Number(__ENV.MAXVUS || '40');
const THRESHOLDS_ON  = (__ENV.THRESHOLDS || 'true').toLowerCase() !== 'false';
const EP_RATES       = safeJson(__ENV.EP_RATES) || {};

// ---------- Load Endpoints JSON ----------
const EP_BY_FEATURE = JSON.parse(open('../sources/endpoints.byFeature.json'));

// ---------- Feature / endpoint selection ----------
const SELECTED_FEATURES = normalizeList(FEATURES_RAW);
const allFeatures = Object.keys(EP_BY_FEATURE);
const pickedFeatures = SELECTED_FEATURES.length
  ? allFeatures.filter(function (f) { return SELECTED_FEATURES.indexOf(f) !== -1; })
  : allFeatures;

// Flatten endpoints with feature context (no for..of)
var ENDPOINTS = [];
for (var i = 0; i < pickedFeatures.length; i++) {
  var feature = pickedFeatures[i];
  var list = (EP_BY_FEATURE[feature] || []).filter(function (ep) {
    return matchesFilter(ep.name, ENDPOINT_FILTER);
  });
  for (var j = 0; j < list.length; j++) {
    var ep = list[j];
    var merged = {};
    // manual spread to avoid older-engine quirks
    for (var k in ep) { if (Object.prototype.hasOwnProperty.call(ep, k)) merged[k] = ep[k]; }
    merged.feature = feature;
    ENDPOINTS.push(merged);
  }
}
if (ENDPOINTS.length === 0) {
  console.log('No endpoints selected. Check FEATURES="' + FEATURES_RAW + '" and ENDPOINT_FILTER="' + ENDPOINT_FILTER + '".');
}

// ---------- URL handling ----------
function withEnvHost(url) {
  try {
    if (BASE_URL && !/^\w+:\/\//.test(url)) {
      var a = new URL(BASE_URL.replace(/\/+$/,'') + '/' + String(url).replace(/^\/+/,''));
      return a.toString();
    }
    var u = new URL(url, BASE_URL || 'http://placeholder');
    if (/^\w+:\/\//.test(url)) {
      if (ENV === 'dev') {
        u.hostname = u.hostname.replace(/-test(\.|-)/, '-dev$1');
      } else if (ENV === 'uat') {
        u.hostname = u.hostname.replace(/-dev(\.|-)/, '-test$1');
      }
    }
    return u.toString();
  } catch (_) {
    if (BASE_URL) return BASE_URL.replace(/\/+$/,'') + '/' + String(url).replace(/^\/+/,'');
    return url;
  }
}

// ---------- Scenarios ----------
var scenarios = {};
for (var s = 0; s < ENDPOINTS.length; s++) {
  (function (idx) {
    var ep = ENDPOINTS[idx];
    var featureRates = EP_RATES[ep.feature] || {};
    var rate = featureRates[ep.name] || RPS;
    scenarios['ep_' + idx] = {
      executor: 'constant-arrival-rate',
      rate: rate,
      timeUnit: '1s',
      duration: DURATION,
      preAllocatedVUs: PREALLOC,
      maxVUs: MAXVUS,
      exec: 'exec_ep_' + idx,
      tags: { feature: ep.feature, endpoint: ep.name, method: ep.method }
    };
    // register exec function in module scope
    globalThis['exec_ep_' + idx] = function () { runOne(ep); };
  })(s);
}

const thresholds = THRESHOLDS_ON ? {
  http_req_failed:   [{ threshold: 'rate<0.05',   abortOnFail: false }],
  http_req_duration: [{ threshold: 'p(95)<60000', abortOnFail: false }],
} : {};

export const options = { scenarios: scenarios, thresholds: thresholds };

// ---------- Runner ----------
function runOne(ep) {
  var url  = withEnvHost(ep.url || ep.path || ep.unified_string || '');
  var tags = { feature: ep.feature, endpoint: ep.name, method: ep.method };

  var hdrs = {};
  var needsAuth = /^(POST|PUT|PATCH|DELETE)$/i.test(ep.method || '');
  if (needsAuth) {
    hdrs['Content-Type'] = 'application/json';
    if (TOKEN) hdrs['Authorization'] = 'Bearer ' + TOKEN;
  }

  var res;
  var method = (ep.method || 'GET').toUpperCase();
  try {
    if (method === 'GET') {
      res = http.get(url, { tags: tags });
    } else if (method === 'POST') {
      res = http.post(url, cleanBody(ep.body), { headers: hdrs, tags: tags });
    } else if (method === 'PUT') {
      res = http.put(url, cleanBody(ep.body), { headers: hdrs, tags: tags });
    } else if (method === 'PATCH') {
      res = http.patch(url, cleanBody(ep.body), { headers: hdrs, tags: tags });
    } else if (method === 'DELETE') {
      var body = cleanBody(ep.body);
      res = body ? http.del(url, body, { headers: hdrs, tags: tags }) : http.del(url, null, { headers: hdrs, tags: tags });
    } else {
      res = http.get(url, { tags: tags });
    }
  } catch (e) {
    console.error('Request error for ' + ep.feature + ' :: ' + ep.name + ' -> ' + e);
    return;
  }

  var expectStatus = ep.expect && ep.expect.status ? Number(ep.expect.status) : 200;
  var expectText   = ep.expect && ep.expect.text ? String(ep.expect.text) : null;

  check(res, { 'status ok': function (r) { return r.status === expectStatus; } }, tags);
  if (expectText) {
    check(res, { 'body has text': function (r) { return String(r.body || '').indexOf(expectText) !== -1; } }, tags);
  }

  sleep(0.1);
}

// ---------- Helpers ----------
function cleanBody(body) {
  if (body == null) return null;
  if (typeof body === 'string') return body.trim();
  try { return JSON.stringify(body); } catch (_) { return String(body); }
}
function normalizeList(s) {
  return String(s || '')
    .split(',')
    .map(function (x) { return x.trim(); })
    .filter(function (x) { return !!x; });
}
function matchesFilter(name, filter) {
  if (!filter) return true;
  var f = String(filter).trim();
  if (f.charAt(0) === '/' && f.charAt(f.length - 1) === '/') {
    try { return new RegExp(f.slice(1, -1), 'i').test(name); }
    catch (_) { return name.toLowerCase().indexOf(f.slice(1, -1).toLowerCase()) !== -1; }
  }
  return name.toLowerCase().indexOf(f.toLowerCase()) !== -1;
}
function safeJson(s) {
  try { return s ? JSON.parse(s) : null; } catch (_) { return null; }
}
