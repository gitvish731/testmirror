/* k6 runtime imports (CommonJS-friendly) */
const http = require('k6/http');
const { check, sleep } = require('k6');
const reporter = require('../vendor/handleSummary.js'); // module.exports = { handleSummary }
const openFile = open; // k6 global 'open'

/* ===== 1) Load endpoints map (JSON first, TS fallback) ===== */
let ENDPOINTS_BY_FEATURE = {};
try {
  ENDPOINTS_BY_FEATURE = JSON.parse(openFile('../sources/endpoints.byFeature.json'));
} catch (e) {
  ENDPOINTS_BY_FEATURE = require('../sources/endpoints.byFeature.js');
}

/* ===== 2) Env controls ===== */
const ENV = __ENV || {};
const FEATURE_NAMES = (ENV.FEATURES || '')
  .split(',')
  .map(function (s) { return s.trim(); })
  .filter(Boolean);

const ENDPOINT_FILTER = (ENV.ENDPOINT_FILTER || '').trim();
const BASE_URL = (ENV.BASE_URL || '').trim();
const TOKEN = ENV.token || ENV.TOKEN || '';
const RPS = Number(ENV.RPS || 1);
const DURATION = ENV.DURATION || '30s';
const PREALLOC = Number(ENV.PREALLOC || 6);
const MAXVUS = Number(ENV.MAXVUS || 60);
const THRESHOLDS_ON = String(ENV.THRESHOLDS_ON || 'true').toLowerCase() !== 'false';

/* ===== 3) Options ===== */
export const options = {
  scenarios: {
    console: {
      executor: 'constant-arrival-rate',
      rate: RPS,
      timeUnit: '1s',
      duration: DURATION,
      preAllocatedVUs: PREALLOC,
      maxVUs: MAXVUS,
      gracefulStop: '30s',
    },
  },
  thresholds: THRESHOLDS_ON
    ? {
        http_req_failed: ['rate<0.20'],
        http_req_duration: ['p(95)<60000'],
      }
    : {},
};

/* ===== 4) Helpers ===== */
function replaceBase(urlStr) {
  if (!BASE_URL) return urlStr;
  try {
    var u = new URL(urlStr);
    var base = new URL(BASE_URL);
    u.protocol = base.protocol;
    u.host = base.host;
    return u.toString();
  } catch (e) {
    return urlStr;
  }
}

function minifyBody(body) {
  if (body == null) return null;
  var s = String(body).trim();
  if (!s) return null;
  try {
    return JSON.stringify(JSON.parse(s));
  } catch (e) {
    return s.replace(/\s+/g, ' ');
  }
}

function buildHeaders(method) {
  if (method === 'GET') return {};
  var h = { 'Content-Type': 'application/json' };
  if (TOKEN) h.Authorization = 'Bearer ' + TOKEN;
  return h;
}

/* ===== 5) Select feature(s) & endpoints ===== */
function selectedEndpoints() {
  var featuresToUse = FEATURE_NAMES.length ? FEATURE_NAMES : Object.keys(ENDPOINTS_BY_FEATURE);
  var list = [];
  for (var i = 0; i < featuresToUse.length; i += 1) {
    var feature = featuresToUse[i];
    var eps = ENDPOINTS_BY_FEATURE[feature] || [];
    for (var j = 0; j < eps.length; j += 1) {
      var ep = eps[j];
      if (ENDPOINT_FILTER && String(ep.name).indexOf(ENDPOINT_FILTER) === -1) continue;
      list.push({ feature: feature, ep: ep });
    }
  }
  console.log(
    'Selected ' + list.length + ' endpoint(s) across FEATURES: ' + featuresToUse.join(', ')
  );
  return list;
}

/* ===== 6) Runner (tags on requests & checks) ===== */
export default function () {
  var entries = selectedEndpoints();
  if (!entries.length) { sleep(1); return; }

  var sliceSize = Math.min(10, entries.length);
  for (var i = 0; i < sliceSize; i += 1) {
    var pair = entries[(i + __ITER) % entries.length];
    var feature = pair.feature;
    var ep = pair.ep;

    var url = replaceBase(ep.url);
    var method = (ep.method || 'GET').toUpperCase();
    var headers = buildHeaders(method);
    var tags = { feature: feature, endpoint: String(ep.name || (method + ' ' + url)) };

    var body = minifyBody(ep.body);
    var res;
    if (method === 'GET') {
      res = http.get(url, { headers: headers, tags: tags });
    } else {
      res = http.request(method, url, body, { headers: headers, tags: tags });
    }

    var expectStatus = (ep.expect && typeof ep.expect.status === 'number') ? ep.expect.status : 200;
    var mustContain = (ep.expect && typeof ep.expect.text === 'string') ? ep.expect.text : null;

    check(res, { 'status ok': function (r) { return r.status === expectStatus; } }, tags);

    if (mustContain) {
      var text = String(res && res.body ? res.body : '');
      check(res, { 'body has text': function () { return text.indexOf(mustContain) !== -1; } }, tags);
    }

    sleep(0.1);
  }
}

/* ===== 7) HTML report hook ===== */
export function handleSummary(data) {
  return reporter.handleSummary(data);
}
