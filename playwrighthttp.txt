// perf/k6/vendor/handleSummary.js
// Plain CommonJS, ES5-compatible. No external imports, no ESM.
// Writes a readable HTML summary + prints a short text summary to stdout.

function fmt(n, digits) {
  if (n === undefined || n === null || isNaN(n)) return '-';
  var d = (typeof digits === 'number') ? digits : 0;
  return Number(n).toFixed(d);
}

function esc(s) {
  return String(s)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}

function td(label, value) {
  return '<tr><td>' + esc(label) + '</td><td>' + esc(value) + '</td></tr>';
}

function kv(obj, key, def) {
  return (obj && obj[key] != null) ? obj[key] : def;
}

function trendValue(m, p) {
  // p is "p95", "avg", etc.
  return kv(kv(m, 'values', {}), p, undefined);
}

function renderHtml(data) {
  var m = data.metrics || {};

  var checks = m.checks || {};
  var httpReqs = m.http_reqs || {};
  var httpDur = m.http_req_duration || {};
  var vusMax = m.vus_max || {};
  var iterations = m.iterations || {};

  var title = 'SDLC Auto Gov Load Test â€“ ' + new Date().toISOString().replace('T',' ').replace(/\..+/, '');

  var rows = '';
  rows += td('Checks (pass/fail)', fmt(kv(kv(checks,'values',{}),'passes',0),0) + ' / ' + fmt(kv(kv(checks,'values',{}),'fails',0),0));
  rows += td('Requests', fmt(kv(kv(httpReqs,'values',{}),'count',0),0) + ' total');
  rows += td('Latency p(95)', fmt(trendValue(httpDur, 'p(95)'), 2) + ' ms');
  rows += td('Iterations', fmt(kv(kv(iterations,'values',{}),'count',0),0));
  rows += td('VUs max', fmt(kv(kv(vusMax,'values',{}),'value',0),0));

  // simple bar sketch for latency percentiles (inline SVG)
  var p90 = trendValue(httpDur,'p(90)') || 0;
  var p95 = trendValue(httpDur,'p(95)') || 0;
  var p99 = trendValue(httpDur,'p(99)') || 0;
  var maxv = Math.max(p90, p95, p99, 1);
  var w = 300, h = 16, gap = 6;

  function bar(label, val, color) {
    var len = Math.round((val / maxv) * w);
    return '' +
      '<div style="margin:6px 0;">' +
      '<div style="font:12px/1.2 monospace;margin-bottom:2px;">' + esc(label) + ': ' + fmt(val,2) + ' ms</div>' +
      '<div style="background:#eee;width:' + w + 'px;height:' + h + 'px;">' +
      '<div style="background:' + color + ';width:' + len + 'px;height:' + h + 'px;"></div>' +
      '</div>' +
      '</div>';
  }

  var barsHtml =
    bar('p(90)', p90, '#8ecae6') +
    bar('p(95)', p95, '#219ebc') +
    bar('p(99)', p99, '#023047');

  // build (truncated) raw JSON
  var raw = esc(JSON.stringify(data, null, 2));
  if (raw.length > 300000) { // keep file size sane
    raw = raw.slice(0, 300000) + '\n... (truncated) ...\n';
  }

  var html =
'<!doctype html><html><head><meta charset="utf-8" />' +
'<title>' + esc(title) + '</title>' +
'<meta name="viewport" content="width=device-width,initial-scale=1" />' +
'<style>body{font:14px/1.5 -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;padding:24px;color:#111}' +
'h1{font-size:20px;margin:0 0 16px}table{border-collapse:collapse;margin:8px 0 16px;width:auto}' +
'td{border:1px solid #ddd;padding:8px 12px}pre{background:#fafafa;border:1px solid #eee;padding:12px;overflow:auto;max-height:60vh}' +
'.grid{display:grid;grid-template-columns:1fr;gap:16px}@media(min-width:900px){.grid{grid-template-columns:1fr 1fr}}' +
'.card{border:1px solid #e6e6e6;border-radius:8px;padding:16px}</style></head><body>' +
'<h1>' + esc(title) + '</h1>' +
'<div class="grid">' +
  '<div class="card"><table>' + rows + '</table>' + barsHtml + '</div>' +
  '<div class="card"><div style="font-weight:600;margin-bottom:8px;">Raw JSON (truncated)</div><pre>' + raw + '</pre></div>' +
'</div>' +
'</body></html>';

  return html;
}

// Minimal text summary for stdout
function renderText(data) {
  var m = data.metrics || {};
  var checks = m.checks || {};
  var httpReqs = m.http_reqs || {};
  var httpDur = m.http_req_duration || {};

  var pass = kv(kv(checks,'values',{}),'passes',0) || 0;
  var fail = kv(kv(checks,'values',{}),'fails',0) || 0;
  var total = kv(kv(httpReqs,'values',{}),'count',0) || 0;
  var p95 = trendValue(httpDur,'p(95)');

  var out = '';
  out += 'Checks: ' + pass + ' pass / ' + fail + ' fail\n';
  out += 'Requests: ' + total + '\n';
  out += 'Latency p(95): ' + fmt(p95,2) + ' ms\n';
  return out;
}

module.exports = function handleSummary(data) {
  // return a map of outputs: 'stdout' and a file
  var result = {};
  result['stdout'] = renderText(data);
  result['perf/k6/reports/summary.html'] = renderHtml(data);
  return result;
};
