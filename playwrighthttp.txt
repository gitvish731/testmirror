/* perf/k6/vendor/handleSummary.js
 * Self-contained summary renderer + small built-in textSummary helper (no imports).
 */

/* -------- minimal textSummary (inlined to avoid module resolver issues) -------- */
function textSummary(data, { indent = ' ', enableColors = false } = {}) {
  const c = (s) => s; // no colors for k6 local HTML use
  const pad = (n, w = 7) => String(n).padStart(w);
  const lines = [];

  // top checks
  const checks = data.metrics.checks?.values || {};
  const pass = checks.passes || 0;
  const fail = checks.fails || 0;
  lines.push(`${indent}${c('checks')}: ${pass} pass / ${fail} fail`);

  // requests
  const httpReqs = data.metrics.http_reqs?.values || {};
  const reqCount = httpReqs.count || 0;
  lines.push(`${indent}${c('requests')}: ${reqCount} total`);

  // latency
  const dur = data.metrics['http_req_duration']?.values || {};
  const p95 = dur['p(95)'];
  const avg = dur.avg;
  const min = dur.min;
  const max = dur.max;
  const fmt = (v) => (v == null ? 'n/a' : `${Math.round(v)} ms`);
  lines.push(
    `${indent}${c('latency')}: avg ${fmt(avg)}, p(95) ${fmt(p95)}, min ${fmt(min)}, max ${fmt(max)}`
  );

  return lines.join('\n') + '\n';
}
/* ----------------------------------------------------------------------------- */

/* small helpers */
const esc = (s) =>
  String(s)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');

const fmtMs = (v) => (v == null ? '0 ms' : `${Math.round(v)} ms`);
const pick = (obj, key, d = 0) => (obj && obj[key] != null ? obj[key] : d);

/* Build a compact HTML report with optional Feature/Endpoint table (from tags) */
function buildHtml(data) {
  const dur = data.metrics['http_req_duration']?.values || {};
  const checks = data.metrics.checks?.values || {};
  const httpReqs = data.metrics.http_reqs?.values || {};
  const vusMax = data.metrics.vus_max?.values || {};
  const iter = data.metrics.iterations?.values || {};

  // pull any tagged per-request metrics that our runner pushed (reqs_ep_* and time_ep_*)
  const per = {};
  for (const [name, m] of Object.entries(data.metrics || {})) {
    if (!name.startsWith('reqs_ep_') && !name.startsWith('time_ep_')) continue;
    const id = name.replace(/^reqs_ep_|^time_ep_/, '');
    per[id] = per[id] || { id, count: 0, p95: null };
    if (name.startsWith('reqs_ep_')) per[id].count = pick(m.values, 'count', 0);
    if (name.startsWith('time_ep_')) per[id].p95 = pick(m.values, 'p(95)', null);
  }

  // split id into feature/endpoint for display, we encoded with "__" from the runner
  const rows = Object.values(per)
    .map((r) => {
      const [feature, endpoint] = r.id.split('__');
      return { feature: feature || '', endpoint: endpoint || r.id, ...r };
    })
    .sort((a, b) => (b.p95 || 0) - (a.p95 || 0)); // slowest first

  const hasPer = rows.length > 0;

  const head = `
  <style>
    body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Arial,sans-serif;padding:24px}
    h1{margin:0 0 16px 0;font-size:24px}
    table{border-collapse:collapse;margin:16px 0;width:680px;max-width:100%}
    th,td{border:1px solid #ddd;padding:8px;text-align:left;font-size:14px}
    th{background:#f4f6f8}
    .bars{margin:12px 0 20px;max-width:680px}
    .bar{height:10px;background:#e9eef5;margin:8px 0;position:relative;border-radius:2px}
    .bar > span{position:absolute;left:0;top:0;bottom:0;background:#4a89ff;border-radius:2px}
    .muted{color:#697386}
    .ok{color:#15803d}
    .warn{color:#b45309}
  </style>`;

  const summaryTable = `
  <table>
    <tr><th>Checks (pass/fail)</th><td>${pick(checks, 'passes', 0)} / ${pick(checks, 'fails', 0)}</td></tr>
    <tr><th>Requests</th><td>${pick(httpReqs, 'count', 0)} total</td></tr>
    <tr><th>Latency p(95)</th><td>${fmtMs(pick(dur, 'p(95)', 0))}</td></tr>
    <tr><th>Latency avg / min / max</th>
        <td>${fmtMs(pick(dur, 'avg', 0))} / ${fmtMs(pick(dur, 'min', 0))} / ${fmtMs(pick(dur, 'max', 0))}</td></tr>
    <tr><th>Iterations</th><td>${pick(iter, 'count', 0)}</td></tr>
    <tr><th>VUs max</th><td>${pick(vusMax, 'value', 0)}</td></tr>
  </table>`;

  // simple bars sized relative to max duration
  const barAvg = pick(dur, 'avg', 0);
  const barP95 = pick(dur, 'p(95)', 0);
  const barMax = pick(dur, 'max', 0) || 1;
  const w = (x) => `${Math.min(100, Math.round((x / barMax) * 100))}%`;

  const bars = `
  <div class="bars">
    <div class="bar" title="avg ${fmtMs(barAvg)}"><span style="width:${w(barAvg)}"></span></div>
    <div class="bar" title="p(95) ${fmtMs(barP95)}"><span style="width:${w(barP95)}"></span></div>
    <div class="bar" title="max ${fmtMs(barMax)}"><span style="width:${w(barMax)}"></span></div>
  </div>`;

  const perTable = hasPer
    ? `
  <h3>Feature / Endpoint breakdown</h3>
  <table>
    <thead><tr><th>Feature</th><th>Endpoint</th><th>Requests</th><th>p(95) duration</th></tr></thead>
    <tbody>
      ${rows
        .map(
          (r) =>
            `<tr><td>${esc(r.feature)}</td><td>${esc(r.endpoint)}</td><td>${r.count}</td><td>${fmtMs(r.p95)}</td></tr>`
        )
        .join('\n')}
    </tbody>
  </table>`
    : `<h3>Feature / Endpoint breakdown</h3><div class="muted">No per-feature data (did the runner send tags?).</div>`;

  // include a small truncated JSON block for debugging
  const sampleJson = esc(
    JSON.stringify(
      {
        state: data.state,
        metrics: {
          checks: data.metrics.checks,
          http_req_duration: data.metrics['http_req_duration'],
          http_reqs: data.metrics.http_reqs,
        },
      },
      null,
      2
    )
  );

  return `<!doctype html><meta charset="utf-8">
  <title>SDLC Auto Gov Load Test</title>
  ${head}
  <h1>SDLC Auto Gov Load Test â€“ ${new Date().toISOString().replace('T', ' ').slice(0, 19)}</h1>
  ${summaryTable}
  ${bars}
  ${perTable}
  <details><summary>Raw JSON (truncated)</summary><pre>${sampleJson}</pre></details>`;
}

/* k6 hook */
export default function handleSummary(data) {
  const html = buildHtml(data);
  return {
    stdout: textSummary(data, { indent: '  ', enableColors: false }),
    'perf/k6/reports/summary.html': html,
  };
}
