// perf/k6/scenarios/from-playwright.http.js
/* eslint-disable no-undef */

// k6 core (keep CommonJS style for max compatibility with v0.46+)
const http = require('k6/http');
const { check, sleep } = require('k6');

// Load the generated endpoints map at init (JSON created by your generator)
var endpointsByFeature = JSON.parse(open('../sources/endpoints.byFeature.json'));

// --------- Env / knobs ---------
var ENV       = (__ENV.ENV || 'dev').toLowerCase();                 // 'dev' | 'uat'
var BASE_URL  = __ENV.BASE_URL || '';                               // hard override (https://host[:port])
var TOKEN     = __ENV.TOKEN || '';                                  // bearer for POST/PATCH/DELETE
var FEATURES  = (__ENV.FEATURES || '').split(',').map(function(s){return s.trim();}).filter(Boolean);
var EP_FILTER = __ENV.ENDPOINT_FILTER ? new RegExp(__ENV.ENDPOINT_FILTER) : null;

var RPS       = Number(__ENV.RPS || 1);     // per-endpoint rate
var DURATION  = __ENV.DURATION || '30s';
var PREALLOC  = Number(__ENV.PREALLOC || 5);
var MAXVUS    = Number(__ENV.MAXVUS || 50);

// Optional JSON map of per-endpoint rates: {"Feature:Endpoint Name": 10, ...}
var EP_RATES = {};
try { if (__ENV.EP_RATES) EP_RATES = JSON.parse(__ENV.EP_RATES); } catch (_e) {}

// --------- Helpers ----------
function swapEnvInHost(url) {
  // If BASE_URL specified, force protocol+host to BASE_URL
  if (BASE_URL) {
    var idx = url.indexOf('://');
    if (idx >= 0) {
      var slash = url.indexOf('/', idx + 3);
      if (slash >= 0) return BASE_URL.replace(/\/+$/, '') + url.slice(slash);
    }
    return BASE_URL.replace(/\/+$/, '') + '/' + url.replace(/^https?:\/\/[^/]+\/?/, '');
  }
  // otherwise, flip -dev / -test in host
  var desired = (ENV === 'dev') ? '-dev' : '-test';
  return url
    .replace(/-dev(\.[^\/]+(?:\/|$))/, function(_, tail){ return desired + tail; })
    .replace(/-test(\.[^\/]+(?:\/|$))/, function(_, tail){ return desired + tail; });
}

function buildHeaders(method) {
  var h = {};
  if (method !== 'GET') {
    h['Content-Type'] = 'application/json';
  }
  if (method !== 'GET' && TOKEN) {
    h['Authorization'] = 'Bearer ' + TOKEN;
  }
  return h;
}

function send(method, url, body, params) {
  if (method === 'GET')    return http.get(url, params);
  if (method === 'POST')   return http.post(url, body || null, params);
  if (method === 'PUT')    return http.put(url, body || null, params);
  if (method === 'PATCH')  return http.patch(url, body || null, params);
  if (method === 'DELETE') return http.del(url, null, params);
  return http.request(method, url, body || null, params);
}

// --------- Select endpoints for this run ----------
function pickEndpoints() {
  var selected = [];
  var featureKeys = FEATURES.length ? FEATURES : Object.keys(endpointsByFeature);
  for (var i = 0; i < featureKeys.length; i++) {
    var feature = featureKeys[i];
    var list = endpointsByFeature[feature] || [];
    for (var j = 0; j < list.length; j++) {
      var ep = list[j];
      if (EP_FILTER && !EP_FILTER.test(ep.name)) continue;
      selected.push({ feature: feature, ep: ep });
    }
  }
  return selected;
}

var CHOSEN = pickEndpoints();

// --------- k6 scenarios (one per endpoint) ----------
export let options = {
  scenarios: (function(){
    var sc = {};
    for (var i = 0; i < CHOSEN.length; i++) {
      var feature = CHOSEN[i].feature;
      var ep      = CHOSEN[i].ep;
      var key     = feature + ':' + ep.name;
      var rate    = (EP_RATES[key] != null) ? Number(EP_RATES[key]) : RPS;

      sc['ep_' + i] = {
        executor: 'constant-arrival-rate',
        rate: rate,
        timeUnit: '1s',
        duration: DURATION,
        preAllocatedVUs: PREALLOC,
        maxVUs: MAXVUS,
        exec: 'ep_' + i
      };
    }
    return sc;
  })(),
  thresholds: {
    http_req_failed: ['rate<0.01']
  }
};

// --------- One exec() per endpoint with TAGS on requests *and* checks ----------
for (var k = 0; k < CHOSEN.length; k++) {
  (function(idx){
    var feature = CHOSEN[idx].feature;
    var ep      = CHOSEN[idx].ep;

    exports['ep_' + idx] = function () {
      var url     = swapEnvInHost(ep.url || ep.path || ep.full || '');
      var method  = ep.method || 'GET';
      var headers = buildHeaders(method);
      var body    = ep.body || null;

      // ðŸŽ¯ tags for per-feature & per-endpoint reporting
      var tags = { feature: feature, endpoint: ep.name };

      // http params with headers + tags (headers for GET are fine here)
      var params = { headers: headers, tags: tags };

      var res = send(method, url, body, params);

      var expectStatus = (ep.expect && typeof ep.expect.status !== 'undefined') ? ep.expect.status : undefined;
      var expectText   = (ep.expect && typeof ep.expect.text   !== 'undefined') ? ep.expect.text   : undefined;

      var okStatus = check(
        res,
        { 'status ok': function(r){ return (typeof expectStatus === 'number') ? (r.status === expectStatus) : (r.status >= 200 && r.status < 400); } },
        tags
      );

      var okBody = true;
      if (typeof expectText === 'string' && expectText.length > 0) {
        okBody = check(
          res,
          { 'body has text': function(r){ return (r.body || '').indexOf(expectText) >= 0; } },
          tags
        );
      }

      if (!okStatus || !okBody) {
        // small breather to avoid tight-looping on failures
        sleep(0.1);
      }
    };
  })(k);
}

// keep a default so `k6 run` is happy even if no scenarios match
export default function () { sleep(1); }

// --------- HTML reporter (separate file) ----------
import reporter from '../vendor/handleSummary.js';
export { reporter as handleSummary };
