// perf/k6/vendor/handleSummary.js
// Minimal-ES5 reporter with feature/endpoint breakdown (using tags)
// Works on k6 v0.46 (Goja), no modern syntax.

function safe(obj, k, d) {
  return (obj && Object.prototype.hasOwnProperty.call(obj, k)) ? obj[k] : d;
}

function getTrendValues(metric) {
  var v = (metric && metric.values) || {};
  // Avoid ternaries that sometimes confuse the parser; do it long-form.
  var p95 = 0, p90 = 0, avg = 0, min = 0, max = 0, med = 0;
  if (v['p(95)'] != null) p95 = v['p(95)'];
  if (v['p(90)'] != null) p90 = v['p(90)'];
  if (v.avg != null) avg = v.avg;
  if (v.min != null) min = v.min;
  if (v.max != null) max = v.max;
  if (v.med != null) med = v.med;
  return { p95: p95, p90: p90, avg: avg, min: min, max: max, med: med };
}

function ms(x) { return Math.round(Number(x || 0)); }

function escapeHtml(s) {
  return String(s == null ? '' : s)
    .replace(/&/g, '&amp;').replace(/</g, '&lt;')
    .replace(/>/g, '&gt;').replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
}

function nowStamp() {
  function pad2(n){ return (n<10?'0':'') + n; }
  var d = new Date();
  return d.getFullYear() + '-' + pad2(d.getMonth()+1) + '-' + pad2(d.getDate()) + ' ' +
         pad2(d.getHours()) + ':' + pad2(d.getMinutes()) + ':' + pad2(d.getSeconds());
}

// Build breakdowns from submetrics (k6 adds tag-based submetrics to many metrics)
function buildBreakdown(metrics) {
  var byFeature = {};      // { feature: { total: N, endpoints: { name: N } } }
  var reqs = safe(metrics, 'http_reqs', null);
  var subs = (reqs && reqs.submetrics) || [];

  for (var i = 0; i < subs.length; i += 1) {
    var sm = subs[i];
    var tags = sm.tags || {};
    var feat = tags.feature || 'unknown';
    var ep   = tags.endpoint || 'unknown';

    if (!byFeature[feat]) byFeature[feat] = { total: 0, endpoints: {} };
    byFeature[feat].total += safe(sm, 'values', {}).count || 0;

    if (!byFeature[feat].endpoints[ep]) byFeature[feat].endpoints[ep] = 0;
    byFeature[feat].endpoints[ep] += safe(sm, 'values', {}).count || 0;
  }
  return byFeature;
}

function renderBreakdownTable(bd) {
  var out = '';
  var feats = [];
  for (var f in bd) if (Object.prototype.hasOwnProperty.call(bd, f)) feats.push(f);
  feats.sort();
  for (var i = 0; i < feats.length; i += 1) {
    var f = feats[i];
    out += '<h3 style="margin:16px 0 6px">Feature: ' + escapeHtml(f) +
           ' <span style="font-weight:normal">(requests: ' + bd[f].total + ')</span></h3>';
    out += '<table border="1" cellspacing="0" cellpadding="6" style="border-collapse:collapse;min-width:420px">';
    out += '<tr><th align="left">Endpoint</th><th align="right">Requests</th></tr>';
    var eps = [];
    var eobj = bd[f].endpoints;
    for (var ep in eobj) if (Object.prototype.hasOwnProperty.call(eobj, ep)) eps.push(ep);
    eps.sort();
    for (var j = 0; j < eps.length; j += 1) {
      var epn = eps[j];
      out += '<tr><td>' + escapeHtml(epn) + '</td><td align="right">' + eobj[epn] + '</td></tr>';
    }
    out += '</table>';
  }
  if (!feats.length) out += '<p style="opacity:.75">No per-feature data (did the runner send tags?).</p>';
  return out;
}

function renderSummaryHTML(data) {
  var m = data.metrics || {};
  var checks = safe(m, 'checks', {});
  var reqs   = safe(m, 'http_reqs', {});
  var dur    = getTrendValues(safe(m, 'http_req_duration', {}));
  var vusMax = safe(safe(m, 'vus_max', {}), 'values', {}).value || 0;
  var iters  = safe(safe(m, 'iterations', {}), 'values', {}).count || 0;

  var passes = safe(safe(checks, 'values', {}), 'passes', 0);
  var fails  = safe(safe(checks, 'values', {}), 'fails', 0);
  var totalReq = safe(safe(reqs, 'values', {}), 'count', 0);

  var bd = buildBreakdown(m);

  var html = '';
  html += '<!doctype html><meta charset="utf-8">';
  html += '<title>SDLC Auto Gov Load Test – ' + escapeHtml(nowStamp()) + '</title>';
  html += '<div style="font-family:system-ui,Segoe UI,Arial,sans-serif;max-width:1100px;margin:24px auto;padding:0 16px">';
  html += '<h1 style="margin:0 0 16px">SDLC Auto Gov Load Test – ' + escapeHtml(nowStamp()) + '</h1>';

  html += '<table border="1" cellspacing="0" cellpadding="8" style="border-collapse:collapse;min-width:520px">';
  html += '<tr><th align="left">Checks (pass/fail)</th><td>' + passes + ' / ' + fails + '</td></tr>';
  html += '<tr><th align="left">Requests</th><td>' + totalReq + ' total</td></tr>';
  html += '<tr><th align="left">Latency p(95)</th><td>' + ms(dur.p95) + ' ms</td></tr>';
  html += '<tr><th align="left">Latency avg / min / max</th><td>' +
          ms(dur.avg) + ' ms / ' + ms(dur.min) + ' ms / ' + ms(dur.max) + ' ms</td></tr>';
  html += '<tr><th align="left">Iterations</th><td>' + iters + '</td></tr>';
  html += '<tr><th align="left">VUs max</th><td>' + vusMax + '</td></tr>';
  html += '</table>';

  // Simple latency bar (min/avg/p95/max)
  var bar = function(label, value, max) {
    var width = max > 0 ? Math.round((value / max) * 400) : 0;
    if (width < 1 && value > 0) width = 1;
    return '<div style="display:flex;align-items:center;margin:6px 0">' +
           '<div style="width:80px;opacity:.75">' + escapeHtml(label) + '</div>' +
           '<div style="background:#e5e7eb;height:10px;width:420px;position:relative">' +
           '<div style="background:#3b82f6;height:10px;width:' + width + 'px"></div>' +
           '</div>' +
           '<div style="margin-left:8px;width:90px;text-align:right">' + ms(value) + ' ms</div>' +
           '</div>';
  };
  var maxRef = Math.max(ms(dur.max), ms(dur.p95), ms(dur.avg));
  html += '<h3 style="margin:18px 0 6px">Latency bars</h3>';
  html += bar('avg', ms(dur.avg), maxRef);
  html += bar('p(95)', ms(dur.p95), maxRef);
  html += bar('max', ms(dur.max), maxRef);

  html += '<h2 style="margin:22px 0 6px">Feature / Endpoint breakdown</h2>';
  html += renderBreakdownTable(bd);

  // Raw (truncated)
  var raw = JSON.stringify({
    checks: safe(m, 'checks', {}),
    http_req_duration: safe(m, 'http_req_duration', {}),
    http_reqs: safe(m, 'http_reqs', {}),
    iterations: safe(m, 'iterations', {}),
    vus_max: safe(m, 'vus_max', {})
  }, null, 2);
  html += '<details style="margin-top:18px"><summary><b>Raw JSON (truncated)</b></summary>' +
          '<pre style="white-space:pre-wrap;background:#f8fafc;border:1px solid #e5e7eb;padding:12px;border-radius:6px;max-height:420px;overflow:auto">' +
          escapeHtml(raw) + '</pre></details>';

  html += '</div>';
  return html;
}

function handleSummary(data) {
  var html = renderSummaryHTML(data);
  return {
    // Keep existing JSON for debugging
    'perf/k6/reports/summary.json': JSON.stringify(data, null, 2),
    // New richer HTML
    'perf/k6/reports/summary.html': html
  };
}

module.exports = { handleSummary: handleSummary };
