// perf/k6/vendor/handleSummary.js
//
// Plain-ES5 handleSummary that k6 can parse. No imports, no destructuring.
// Looks for custom per-endpoint metrics named:
//   - reqs_ep_<id>  (Counter)
//   - time_ep_<id>  (Trend with avg/p(95)/max)
// where <id> is "<feature>__<endpoint>" (lowercased, spaces -> _).
//
// Produces: perf/k6/reports/summary.html

function esc(s) {
  return String(s == null ? '' : s)
    .replace(/&/g, '&amp;').replace(/</g, '&lt;')
    .replace(/>/g, '&gt;').replace(/"/g, '&quot;');
}

function fmtMs(n) { return (Math.round(Number(n) * 1000) / 1000) + ' ms'; }
function bar(widthPx) {
  return '<div style="height:10px;background:#2b6cb0;width:'+widthPx+'px;border-radius:3px;"></div>';
}

function metricValue(data, name, keyPath) {
  // keyPath e.g. ['values','p(95)'] or ['values','count']
  if (!data || !data.metrics) return null;
  var m = data.metrics[name];
  if (!m) return null;
  var v = m;
  for (var i = 0; i < keyPath.length; i++) {
    if (v == null) return null;
    v = v[keyPath[i]];
  }
  return v;
}

function computeLatencyNumbers(data) {
  var p95 = metricValue(data, 'http_req_duration', ['values','p(95)']);
  var avg = metricValue(data, 'http_req_duration', ['values','avg']);
  var min = metricValue(data, 'http_req_duration', ['values','min']);
  var max = metricValue(data, 'http_req_duration', ['values','max']);
  return { p95: p95 || 0, avg: avg || 0, min: min || 0, max: max || 0 };
}

function summarizeEndpointRows(data) {
  var rows = [];               // { feature, endpoint, count, avg, p95, max }
  var metrics = data && data.metrics ? data.metrics : {};
  for (var k in metrics) {
    if (!metrics.hasOwnProperty(k)) continue;

    // reqs_ep_<id> gives us the existence + count
    if (k.indexOf('reqs_ep_') === 0) {
      var id = k.substring('reqs_ep_'.length); // <feature>__<endpoint>
      var cnt = metricValue(data, k, ['values','count']) || 0;

      // get timing trend with the same id
      var tname = 'time_ep_' + id;
      var avg = metricValue(data, tname, ['values','avg']);
      var p95 = metricValue(data, tname, ['values','p(95)']);
      var max = metricValue(data, tname, ['values','max']);

      // Split id to feature/endpoint (we assembled it as "<feature>__<endpoint>")
      var feature = id;
      var endpoint = '';
      var sep = id.indexOf('__');
      if (sep !== -1) {
        feature = id.substring(0, sep);
        endpoint = id.substring(sep + 2);
      }

      rows.push({
        feature: feature.replace(/_/g, ' '),
        endpoint: endpoint.replace(/_/g, ' '),
        count: cnt,
        avg: avg || 0,
        p95: p95 || 0,
        max: max || 0
      });
    }
  }

  // sort by p95 desc
  rows.sort(function(a, b) { return (b.p95 - a.p95); });
  return rows;
}

function renderTable(rows) {
  if (!rows.length) {
    return '<p style="color:#666">No per-feature data (did the runner send tags/metrics?).</p>';
  }
  var html = '';
  html += '<table style="width:100%;border-collapse:collapse;margin-top:8px">';
  html += '<thead><tr>';
  var th = 'padding:6px 8px;border-bottom:1px solid #e2e8f0;text-align:left;background:#f7fafc;font-weight:600;';
  html += '<th style="'+th+'">Feature</th>';
  html += '<th style="'+th+'">Endpoint</th>';
  html += '<th style="'+th+'">Requests</th>';
  html += '<th style="'+th+'">Avg</th>';
  html += '<th style="'+th+'">p(95)</th>';
  html += '<th style="'+th+'">Max</th>';
  html += '</tr></thead><tbody>';

  for (var i=0;i<rows.length;i++) {
    var r = rows[i];
    html += '<tr>';
    html += '<td style="padding:6px 8px;border-bottom:1px solid #edf2f7">'+esc(r.feature)+'</td>';
    html += '<td style="padding:6px 8px;border-bottom:1px solid #edf2f7">'+esc(r.endpoint)+'</td>';
    html += '<td style="padding:6px 8px;border-bottom:1px solid #edf2f7">'+esc(r.count)+'</td>';
    html += '<td style="padding:6px 8px;border-bottom:1px solid #edf2f7">'+esc(fmtMs(r.avg))+'</td>';
    html += '<td style="padding:6px 8px;border-bottom:1px solid #edf2f7">'+esc(fmtMs(r.p95))+'</td>';
    html += '<td style="padding:6px 8px;border-bottom:1px solid #edf2f7">'+esc(fmtMs(r.max))+'</td>';
    html += '</tr>';
  }
  html += '</tbody></table>';
  return html;
}

function renderHtml(data) {
  var checksPass = metricValue(data, 'checks', ['values','passes']) || 0;
  var checksFail = metricValue(data, 'checks', ['values','fails']) || 0;
  var reqs       = metricValue(data, 'http_reqs', ['values','count']) || 0;
  var iters      = metricValue(data, 'iterations', ['values','count']) || 0;
  var vusMax     = metricValue(data, 'vus_max', ['values','value']) || 0;

  var lat = computeLatencyNumbers(data);
  var maxBar = Math.max(lat.avg, lat['p95'] || lat.p95, lat.max, 1);
  var scale = 400 / maxBar; // 400px max bar

  var now = new Date().toISOString().replace('T',' ').replace(/\..+/, '');
  var h = '';
  h += '<!doctype html><html><head><meta charset="utf-8">';
  h += '<title>SDLC Auto Gov Load Test - '+esc(now)+'</title>';
  h += '<meta name="viewport" content="width=device-width, initial-scale=1">';
  h += '</head><body style="font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;background:#fff;color:#1a202c;margin:24px">';
  h += '<h1 style="margin:0 0 16px 0">SDLC Auto Gov Load Test â€“ '+esc(now)+'</h1>';

  // Top table
  h += '<table style="border-collapse:collapse;margin-bottom:16px">';
  var cell = 'padding:8px 12px;border:1px solid #e2e8f0';
  h += '<tr><td style="'+cell+'">Checks (pass/fail)</td><td style="'+cell+'">'+esc(checksPass)+' / '+esc(checksFail)+'</td></tr>';
  h += '<tr><td style="'+cell+'">Requests</td><td style="'+cell+'">'+esc(reqs)+' total</td></tr>';
  h += '<tr><td style="'+cell+'">Latency p(95)</td><td style="'+cell+'">'+esc(fmtMs(lat.p95))+'</td></tr>';
  h += '<tr><td style="'+cell+'">Latency avg / min / max</td><td style="'+cell+'">'+esc(fmtMs(lat.avg))+' / '+esc(fmtMs(lat.min))+' / '+esc(fmtMs(lat.max))+'</td></tr>';
  h += '<tr><td style="'+cell+'">Iterations</td><td style="'+cell+'">'+esc(iters)+'</td></tr>';
  h += '<tr><td style="'+cell+'">VUs max</td><td style="'+cell+'">'+esc(vusMax)+'</td></tr>';
  h += '</table>';

  // Bars
  h += '<div style="margin:8px 0 16px 0">';
  h += '<div style="margin-bottom:6px">Latency bars</div>';
  h += '<div style="display:flex;align-items:center;gap:12px;margin:6px 0"><div style="width:420px;background:#edf2f7;height:10px;border-radius:3px;position:relative">'+bar(Math.max(1, Math.round(lat.avg * scale)))+'</div><div>'+esc(fmtMs(lat.avg))+' <span style="color:#718096">(avg)</span></div></div>';
  h += '<div style="display:flex;align-items:center;gap:12px;margin:6px 0"><div style="width:420px;background:#edf2f7;height:10px;border-radius:3px;position:relative">'+bar(Math.max(1, Math.round(lat.p95 * scale)))+'</div><div>'+esc(fmtMs(lat.p95))+' <span style="color:#718096">p(95)</span></div></div>';
  h += '<div style="display:flex;align-items:center;gap:12px;margin:6px 0"><div style="width:420px;background:#edf2f7;height:10px;border-radius:3px;position:relative">'+bar(Math.max(1, Math.round(lat.max * scale)))+'</div><div>'+esc(fmtMs(lat.max))+' <span style="color:#718096">max</span></div></div>';
  h += '</div>';

  // Feature/Endpoint table
  h += '<h2 style="margin:16px 0 8px 0">Feature / Endpoint breakdown</h2>';
  h += renderTable(summarizeEndpointRows(data));

  // Raw JSON (truncated)
  h += '<details style="margin-top:16px"><summary>Raw JSON (truncated)</summary>';
  var json = JSON.stringify(data, null, 2);
  if (json.length > 15000) json = json.substring(0, 15000) + '\n... (truncated)\n';
  h += '<pre style="white-space:pre-wrap;background:#f7fafc;border:1px solid #e2e8f0;padding:12px;border-radius:6px;max-height:420px;overflow:auto">'+esc(json)+'</pre>';
  h += '</details>';

  h += '</body></html>';
  return h;
}

function textSummaryMinimal(data) {
  // extremely small text summary for stdout
  var checksPass = metricValue(data, 'checks', ['values','passes']) || 0;
  var checksFail = metricValue(data, 'checks', ['values','fails']) || 0;
  var reqs       = metricValue(data, 'http_reqs', ['values','count']) || 0;
  var lat        = computeLatencyNumbers(data);
  var out  = '';
  out += 'Checks: ' + checksPass + ' pass, ' + checksFail + ' fail\n';
  out += 'Requests: ' + reqs + '\n';
  out += 'Latency p(95): ' + fmtMs(lat.p95) + ' | avg: ' + fmtMs(lat.avg) + ' | max: ' + fmtMs(lat.max) + '\n';
  return out;
}

module.exports = function handleSummary(data) {
  var files = {};
  files['perf/k6/reports/summary.html'] = renderHtml(data);
  files['stdout'] = textSummaryMinimal(data);
  return files;
};
