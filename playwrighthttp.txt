/* eslint-disable */
// Minimal textSummary used by handleSummary.js (CommonJS-friendly)
function textSummary(data, { indent = ' ', enableColors = false } = {}) {
  const m = data.metrics || {};
  const checks = ((m.checks || {}).values || {}).passes || 0;
  const reqs  = ((m.http_reqs || {}).values || {}).count  || 0;

  const durVals = ((m['http_req_duration'] || {}).values) || {};
  const p95 = durVals['p(95)'] ?? durVals.p95 ?? 0;

  const lines = [];
  lines.push(`${indent}checks...............: ${checks}`);
  lines.push(`${indent}http_reqs............: ${reqs}`);
  lines.push(`${indent}http_req_duration p95: ${p95} ms`);
  return lines.join('\n');
}

module.exports = { textSummary };

//-----------------------------------------------------------------------------

/* eslint-disable */
const { textSummary } = require('./k6-text-summary-lite.js');

// small helpers
const pad = (n) => String(n).padStart(2, '0');
const hhmmss = (d) => `${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;
const today = () => {
  const d = new Date();
  return `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())} ${hhmmss(d)}`;
};

function pickMetric(metrics, names) {
  for (const n of names) {
    if (metrics[n] && (metrics[n].submetrics || metrics[n].values)) return { name: n, m: metrics[n] };
  }
  return null;
}
function p95FromTrend(values) {
  if (!values) return null;
  if ('p(95)' in values) return Number(values['p(95)']);
  if ('p95' in values) return Number(values.p95);
  if ('p(90)' in values) return Number(values['p(90)']);
  if ('max' in values) return Number(values.max);
  return null;
}
function buildFeatureTable(metrics) {
  // Prefer our custom metrics emitted by the runner
  const sel = pickMetric(metrics, ['reqs_by_ep', 'http_reqs']);
  if (!sel) return { rows: [], note: 'No request metrics.' };

  const base = sel.m;
  const subs = base.submetrics || {};
  const rows = [];

  const latSel = pickMetric(metrics, ['latency_by_ep', 'http_req_duration{expected_response:true}', 'http_req_duration']);
  const latBase = latSel ? latSel.m : null;
  const latSubs = latBase && latBase.submetrics ? latBase.submetrics : {};

  for (const key in subs) {
    const sm = subs[key];
    if (!sm || !sm.tags) continue;
    const feat = sm.tags.feature;
    const ep   = sm.tags.endpoint;
    if (!feat || !ep) continue;

    const count = sm.values && (sm.values.count || sm.values.rate || sm.values.iterations || 0);

    let p95 = null;
    if (latBase) {
      for (const k2 in latSubs) {
        const ls = latSubs[k2];
        if (!ls || !ls.tags) continue;
        if (ls.tags.feature === feat && ls.tags.endpoint === ep) {
          p95 = p95FromTrend(ls.values);
          break;
        }
      }
    }
    rows.push({ feature: feat, endpoint: ep, count: Number(count) || 0, p95 });
  }

  rows.sort((a, b) => a.feature === b.feature ? a.endpoint.localeCompare(b.endpoint) : a.feature.localeCompare(b.feature));
  return { rows, note: rows.length ? '' : 'No per-feature data (did the runner send tags?).' };
}

function safeJson(data, limit = 4000) {
  try { return JSON.stringify(data, null, 2).slice(0, limit); }
  catch { return '{}'; }
}

function bar(widthPct) {
  return `<div style="height:10px;background:#2d6cdf;width:${Math.max(0, Math.min(100, widthPct))}%;"></div>`;
}

function handleSummary(data) {
  const metrics = data.metrics || {};
  const checks = metrics.checks?.values?.passes || 0;
  const reqs   = metrics.http_reqs?.values?.count || 0;

  const latVals = metrics['http_req_duration']?.values || {};
  const avg = latVals.avg || 0, p95 = latVals['p(95)'] ?? latVals.p95 ?? 0, min = latVals.min || 0, max = latVals.max || 0;

  const featTable = buildFeatureTable(metrics);

  const title = `SDLC Auto Gov Load Test â€“ ${today()}`;
  const scale = Math.max(1, avg, p95, max);

  let html = `<!doctype html><html><head><meta charset="utf-8"><title>${title}</title>
  <style>
    body{font:14px/1.4 system-ui,Segoe UI,Roboto,Helvetica,Arial,sans-serif;margin:24px;color:#111}
    h1{font-size:22px;margin:0 0 16px}
    table{border-collapse:collapse;margin:12px 0;width:560px}
    th,td{border:1px solid #ddd;padding:8px;text-align:left}
    th{background:#f6f6f6}
    .muted{color:#777}.small{font-size:12px}
  </style></head><body><h1>${title}</h1>`;

  html += `<table>
    <tr><th>Checks (pass/fail)</th><td>${checks} / 0</td></tr>
    <tr><th>Requests</th><td>${reqs} total</td></tr>
    <tr><th>Latency p(95)</th><td>${p95} ms</td></tr>
    <tr><th>Latency avg / min / max</th><td>${avg} ms / ${min} ms / ${max} ms</td></tr>
    <tr><th>Iterations</th><td>${metrics.iterations?.values?.count || 0}</td></tr>
    <tr><th>VUs max</th><td>${metrics.vus_max?.values?.value || 0}</td></tr>
  </table>`;

  html += `<table>
    <tr><th>avg</th><td>${bar((avg/scale)*100)} ${avg} ms</td></tr>
    <tr><th>p(95)</th><td>${bar((p95/scale)*100)} ${p95} ms</td></tr>
    <tr><th>max</th><td>${bar((max/scale)*100)} ${max} ms</td></tr>
  </table>`;

  html += `<h3>Feature / Endpoint breakdown</h3>`;
  if (!featTable.rows.length) {
    html += `<div class="muted small">${featTable.note}</div>`;
  } else {
    html += `<table><tr><th>Feature</th><th>Endpoint</th><th>Requests</th><th>p(95) latency</th></tr>`;
    for (const r of featTable.rows) {
      html += `<tr><td>${r.feature}</td><td>${r.endpoint}</td><td>${r.count}</td><td>${r.p95 != null ? r.p95 + ' ms' : '-'}</td></tr>`;
    }
    html += `</table>`;
  }

  html += `<div class="small muted">Raw JSON (truncated)</div><pre class="small">${safeJson(data)}</pre></body></html>`;

  return {
    stdout: textSummary(data, { indent: ' ', enableColors: true }) + '\n',
    'perf/k6/reports/summary.json': JSON.stringify(data),
    'perf/k6/reports/summary.html': html,
  };
}

module.exports = { handleSummary };
