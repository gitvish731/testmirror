import http from 'k6/http';
import { check, sleep } from 'k6';
import { SharedArray } from 'k6/data';
import { ACC } from '../vendor/accumulator.js';

// -----------------------------------------------------
// Env & URL handling
// -----------------------------------------------------
const ENV = (__ENV.ENV || 'uat').toLowerCase();
const RAW_BASE = (__ENV.BASE_URL || '').trim();
const BASE = RAW_BASE ? new URL(RAW_BASE.endsWith('/') ? RAW_BASE : RAW_BASE + '/') : null;
const BASE_ORIGIN = BASE ? BASE.origin : '';
const BASE_PATH = BASE ? BASE.pathname.replace(/\/+$/, '') : '';

function rewriteForEnv(absUrl) {
  // Keep "test" for uat, rewrite to "dev" for dev
  if (ENV === 'dev') return absUrl.replace(/sdlcapis-test/gi, 'sdlcapis-dev');
  return absUrl;
}

function buildUrl(raw) {
  const u = String(raw || '').trim();
  if (/^https?:\/\//i.test(u)) return rewriteForEnv(u);
  if (!BASE) throw new Error('Relative URL "' + u + '" requires BASE_URL');
  const epPath = u.charAt(0) === '/' ? u : '/' + u;
  return BASE_ORIGIN + BASE_PATH + epPath;
}

function buildHeaders(method) {
  var headers = {
    accept: 'application/json',
    'user-agent': 'k6/auto-runner',
  };
  var m = String(method || 'GET').toUpperCase();
  if (m === 'POST' || m === 'PUT' || m === 'PATCH') {
    headers['content-type'] = 'application/json';
  }
  return headers;
}

// -----------------------------------------------------
// Load endpoints
// -----------------------------------------------------
import endpoints from '../sources/endpoints.byFeature.js';

var FEATURES = (__ENV.FEATURES || '').split(','); // no .map/.filter chain for maximum compat
(function normalizeFeatures() {
  var tmp = [];
  for (var i = 0; i < FEATURES.length; i++) {
    var v = String(FEATURES[i] || '').trim();
    if (v) tmp.push(v);
  }
  FEATURES = tmp;
})();

if (!FEATURES.length) {
  throw new Error('No FEATURES specified. Example: -e FEATURES="ReportingAPI Alpha1"');
}

// Helper to merge endpoint + feature without object spread
function withFeature(f, ep) {
  var obj = { feature: f };
  for (var k in ep) {
    if (Object.prototype.hasOwnProperty.call(ep, k)) obj[k] = ep[k];
  }
  return obj;
}

// Avoid flatMap; build the selected list manually
const SELECTED = new SharedArray('selected-endpoints', function () {
  var out = [];
  for (var i = 0; i < FEATURES.length; i++) {
    var f = FEATURES[i];
    var list = (endpoints && endpoints[f]) ? endpoints[f] : [];
    for (var j = 0; j < list.length; j++) out.push(withFeature(f, list[j]));
  }
  return out;
});

if (!SELECTED.length) {
  throw new Error('No endpoints found for selected FEATURES: ' + FEATURES.join(', '));
}

// -----------------------------------------------------
// Scenarios
// -----------------------------------------------------
export const options = {
  scenarios: {
    default: {
      executor: 'constant-arrival-rate',
      rate: Number(__ENV.RPS || 1),
      duration: String(__ENV.DURATION || 30) + 's',
      preAllocatedVUs: Number(__ENV.PREALLOC || 5),
      maxVUs: Number(__ENV.MAXVUS || 10),
    },
  },
  thresholds: {
    http_req_failed: ['rate<0.05'],
  },
};

// -----------------------------------------------------
// Request + checks
// -----------------------------------------------------
function fire(method, ep, feature) {
  var url = buildUrl(ep.url);
  var endpoint = ep.name || ep.url || 'unknown';
  var expected = Number(ep.expect || ep.status || 200);
  var mustContain = ep.mustContain || ep.text;
  var tags = { feature: feature, endpoint: endpoint };
  var headers = buildHeaders(method);
  var params = { tags: tags, headers: headers };

  if (__ENV.DEBUG_URL === 'true') {
    console.log('[REQ] ' + (method || 'GET') + ' ' + url);
    console.log('[HDR] ' + JSON.stringify(headers));
    if (ep.body) {
      var bodyStr = (typeof ep.body === 'string') ? ep.body : JSON.stringify(ep.body);
      console.log('[BODY] ' + bodyStr);
    }
  }

  var m = String(method || 'GET').toUpperCase();
  var res;
  if (m === 'GET') res = http.get(url, params);
  else if (m === 'DELETE') res = http.del(url, null, params);
  else if (m === 'POST') res = http.post(url, ep && ep.body ? ep.body : '', params);
  else if (m === 'PUT') res = http.put(url, ep && ep.body ? ep.body : '', params);
  else if (m === 'PATCH') res = http.patch(url, ep && ep.body ? ep.body : '', params);
  else res = http.request(m, url, ep && ep.body ? ep.body : '', params);

  check(res, {
    'status ok': function (r) { return r.status === expected; },
    'body has text': function (r) {
      if (!mustContain) return true;
      return String(r.body || '').indexOf(String(mustContain)) !== -1;
    },
  }, tags);

  // Accumulator for per-feature/endpoint table in handleSummary
  if (ACC && typeof ACC.add === 'function') {
    ACC.add(feature, endpoint, res.timings.duration, res.status === expected);
  }

  if (__ENV.DEBUG_URL === 'true') {
    console.log('[RES] ' + res.status + ' ' + url);
    console.log('[BODY] ' + String(res.body).slice(0, 400) + '…');
  }

  return res;
}

// -----------------------------------------------------
// Main test
// -----------------------------------------------------
export default function () {
  if (!SELECTED.length) {
    console.error('No endpoints selected — aborting');
    return;
  }
  var i = Math.floor(Math.random() * SELECTED.length);
  var chosen = SELECTED[i];
  var feature = chosen.feature;
  var method = chosen.method;
  // clone ep without feature/method
  var ep = {};
  for (var k in chosen) {
    if (k === 'feature' || k === 'method') continue;
    if (Object.prototype.hasOwnProperty.call(chosen, k)) ep[k] = chosen[k];
  }
  fire(method, ep, feature);
  sleep(Number(__ENV.SLEEP || 0.2));
}
