import http from 'k6/http';
import { check, sleep } from 'k6';
import { SharedArray } from 'k6/data';
import { Trend } from 'k6/metrics';
import { ACC } from '../vendor/accumulator.js';

// -----------------------------------------------------
// üß© Environment & URL Handling
// -----------------------------------------------------
const ENV = (__ENV.ENV || 'uat').toLowerCase();
const RAW_BASE = (__ENV.BASE_URL || '').trim();
const BASE = RAW_BASE ? new URL(RAW_BASE.endsWith('/') ? RAW_BASE : RAW_BASE + '/') : null;
const BASE_ORIGIN = BASE ? BASE.origin : '';
const BASE_PATH = BASE ? BASE.pathname.replace(/\/+$/, '') : '';

function rewriteForEnv(absUrl) {
  if (ENV === 'dev') {
    return absUrl.replace(/sdlcapis-test/gi, 'sdlcapis-dev');
  }
  return absUrl; // leave test/UAT untouched
}

function buildUrl(raw) {
  const u = String(raw || '').trim();
  if (/^https?:\/\//i.test(u)) {
    return rewriteForEnv(u);
  }
  if (!BASE) {
    throw new Error(`Relative URL "${u}" requires BASE_URL`);
  }
  const epPath = u.startsWith('/') ? u : '/' + u;
  return BASE_ORIGIN + BASE_PATH + epPath;
}

function buildHeaders(method) {
  const hasBody = /^(POST|PUT|PATCH)$/i.test(method);
  return {
    'accept': 'application/json',
    ...(hasBody ? { 'content-type': 'application/json' } : {}),
    'user-agent': 'k6/auto-runner',
  };
}

// -----------------------------------------------------
// üß† Load Endpoints
// -----------------------------------------------------
import endpoints from '../sources/endpoints.byFeature.js';
const FEATURES = (__ENV.FEATURES || '').split(',').map((s) => s.trim()).filter(Boolean);

if (!FEATURES.length) {
  throw new Error('No FEATURES specified. Example: -e FEATURES="ReportingAPI Alpha1"');
}

const SELECTED = new SharedArray('selected-endpoints', () =>
  FEATURES.flatMap((f) =>
    (endpoints[f] || []).map((ep) => ({
      feature: f,
      ...ep,
    })),
  ),
);

if (!SELECTED.length) {
  throw new Error(`No endpoints found for selected FEATURES: ${FEATURES.join(', ')}`);
}

// -----------------------------------------------------
// ‚öôÔ∏è Scenarios Setup
// -----------------------------------------------------
export const options = {
  scenarios: {
    default: {
      executor: 'constant-arrival-rate',
      rate: Number(__ENV.RPS || 1),
      duration: `${__ENV.DURATION || 30}s`,
      preAllocatedVUs: Number(__ENV.PREALLOC || 5),
      maxVUs: Number(__ENV.MAXVUS || 10),
    },
  },
  thresholds: {
    http_req_failed: ['rate<0.05'],
  },
};

// -----------------------------------------------------
// üßæ Request + Checks
// -----------------------------------------------------
function fire(method, ep, feature) {
  const url = buildUrl(ep.url);
  const endpoint = ep.name || ep.url || 'unknown';
  const expected = Number(ep.expect || ep.status || 200);
  const mustContain = ep.mustContain || ep.text;
  const tags = { feature, endpoint };
  const headers = buildHeaders(method);
  const params = { tags, headers };

  if (__ENV.DEBUG_URL === 'true') {
    console.log(`[REQ] ${method} ${url}`);
    console.log(`[HDR] ${JSON.stringify(headers)}`);
    if (ep.body) console.log(`[BODY] ${typeof ep.body === 'string' ? ep.body : JSON.stringify(ep.body)}`);
  }

  let res;
  switch ((method || 'GET').toUpperCase()) {
    case 'GET':
      res = http.get(url, params);
      break;
    case 'DELETE':
      res = http.del(url, null, params);
      break;
    case 'POST':
      res = http.post(url, ep?.body ?? '', params);
      break;
    case 'PUT':
      res = http.put(url, ep?.body ?? '', params);
      break;
    case 'PATCH':
      res = http.patch(url, ep?.body ?? '', params);
      break;
    default:
      res = http.request(method, url, ep?.body ?? '', params);
  }

  check(
    res,
    {
      'status ok': (r) => r.status === expected,
      'body has text': (r) =>
        !mustContain || String(r.body || '').indexOf(mustContain) !== -1,
    },
    tags,
  );

  // send to accumulator (for HandleSummary)
  if (typeof ACC?.add === 'function') {
    ACC.add(feature, endpoint, res.timings.duration, res.status === expected);
  }

  if (__ENV.DEBUG_URL === 'true') {
    console.log(`[RES] ${res.status} ${url}`);
    console.log(`[BODY] ${String(res.body).slice(0, 400)}‚Ä¶`);
  }

  return res;
}

// -----------------------------------------------------
// üöÄ Main Test
// -----------------------------------------------------
export default function () {
  if (!SELECTED.length) {
    console.error('No endpoints selected ‚Äî aborting');
    return;
  }

  const i = Math.floor(Math.random() * SELECTED.length);
  const { feature, method, ...ep } = SELECTED[i];
  fire(method, ep, feature);

  sleep(Number(__ENV.SLEEP || 0.2));
}
