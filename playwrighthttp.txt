import http from 'k6/http';
import { check, sleep } from 'k6';
import { SharedArray } from 'k6/data';

// endpoints map for the selected feature(s)
import { ArtifactsRegistrationV1Alpha1 } from '../sources/endpoints.byFeature.js';

// export the HTML/JSON reporter
export { handleSummary } from '../vendor/handleSummary.js';

// -------------------------------
// Build options dynamically
// -------------------------------
function buildOptions() {
  var vus = Number(__ENV.VUS || 1);
  var byTime = __ENV.DURATION && String(__ENV.DURATION).length > 0;

  var scenarios = {};
  if (byTime) {
    scenarios.by_time = {
      executor: 'constant-vus',
      vus: vus,
      duration: String(__ENV.DURATION),
      gracefulStop: '3s',
    };
  } else {
    var iters = __ENV.ONE ? Number(__ENV.ONE) : 1;
    scenarios.by_iter = {
      executor: 'per-vu-iterations',
      vus: vus,
      iterations: iters,
      gracefulStop: '3s',
    };
  }

  return {
    scenarios: scenarios,
    thresholds: {
      http_req_failed: ['rate<0.05'],
      http_req_duration: ['p(95)<2000'],
    },
  };
}
export const options = buildOptions();

// -------------------------------
// Simple utils (ES5 compatible)
// -------------------------------
function mergeInto(target, source) {
  if (!source) return;
  for (var k in source) {
    if (Object.prototype.hasOwnProperty.call(source, k)) {
      target[k] = source[k];
    }
  }
}

function makeParams(featureName, endpointName, extra) {
  var headers = {};
  var tags = {};

  if (extra && extra.headers) mergeInto(headers, extra.headers);
  if (headers['content-type'] === undefined) headers['content-type'] = 'application/json';
  if (extra && extra.auth) headers['authorization'] = extra.auth;

  tags.feature = featureName;
  tags.endpoint = endpointName;
  if (extra && extra.tags) mergeInto(tags, extra.tags);

  return { headers: headers, tags: tags };
}

// -------------------------------
// Select features -> endpoints
// -------------------------------
var FEATURES = [
  { name: 'ReportingAPI Alpha1', endpoints: ArtifactsRegistrationV1Alpha1 },
];

var matrix = new SharedArray('feature-endpoints', function () {
  return FEATURES;
});

// -------------------------------
// Main
// -------------------------------
export default function main() {
  for (var i = 0; i < matrix.length; i++) {
    var feat = matrix[i];
    var eps = feat.endpoints || [];

    for (var j = 0; j < eps.length; j++) {
      var ep = eps[j];

      var params = makeParams(feat.name, ep.name, {
        auth: ep.auth || '',
        headers: ep.headers || null,
        tags: ep.tags || null,
      });

      var method = (ep.method || 'GET').toUpperCase();
      var res;

      try {
        if (method === 'GET') {
          res = http.get(ep.url, params);
        } else if (method === 'POST') {
          res = http.post(ep.url, ep.body || {}, params);
        } else if (method === 'PATCH') {
          res = http.patch(ep.url, ep.body || {}, params);
        } else if (method === 'DELETE') {
          res = http.del(ep.url, null, params);
        } else {
          console.warn('Unknown method ' + method + ' for ' + ep.name);
          continue;
        }
      } catch (e) {
        console.error('Request error for ' + feat.name + ' -> ' + ep.name + ': ' + String(e));
        continue;
      }

      var expectedStatus = (ep.expect && ep.expect.status) ? ep.expect.status : 200;
      var mustContain = (ep.expect && ep.expect.text) ? ep.expect.text : null;

      check(res, {
        'status ok': function (r) { return r.status === expectedStatus; },
        'body has text': function (r) {
          if (!mustContain) return true;
          var body = String(r.body || '');
          return body.indexOf(mustContain) !== -1;
        },
      });

      if (__ENV.DEBUG_TAGS === '1') {
        console.log('tags=' + JSON.stringify(params.tags));
      }

      sleep(0.2);
    }
  }
}
