// perf/k6/vendor/handleSummary.js
// Works on k6 v0.46 (no remote imports, no spread, no optional chaining)

function secs(n) {
  n = Math.round(n);
  return n + "s";
}

function number(n) {
  if (typeof n !== "number" || isNaN(n)) return String(n);
  return String(Math.round(n * 100) / 100);
}

// very small, local "text summary" so we don’t need jslib.k6.io
function tinyTextSummary(data) {
  var lines = [];
  lines.push("checks............. " + data.metrics.checks.values.passes + " / " + (data.metrics.checks.values.passes + data.metrics.checks.values.fails));
  lines.push("http_reqs.......... " + (data.metrics.http_reqs ? data.metrics.http_reqs.values.count : 0));
  var dur = (data.state && typeof data.state.testRunDurationMs === "number") ? data.state.testRunDurationMs / 1000 : 0;
  lines.push("duration........... " + secs(dur));
  if (data.metrics["http_req_duration"]) {
    var v = data.metrics["http_req_duration"].values;
    lines.push("http_req_duration.. avg " + number(v.avg) + " ms | p(95) " + number(v["p(95)"]) + " ms");
  }
  return lines.join("\n");
}

export default function handleSummary(data) {
  // prove we got called (you’ll see this in the k6 console)
  console.log("[handleSummary] received metrics keys:", Object.keys(data.metrics || {}).length);

  // 1) plain text for stdout
  var text = tinyTextSummary(data);

  // 2) minimal HTML report
  var checks = data.metrics.checks ? data.metrics.checks.values : { passes: 0, fails: 0 };
  var httpReqs = data.metrics.http_reqs ? data.metrics.http_reqs.values.count : 0;
  var lat = data.metrics["http_req_duration"] ? data.metrics["http_req_duration"].values : {};
  var durMs = (data.state && typeof data.state.testRunDurationMs === "number") ? data.state.testRunDurationMs : 0;

  var html = ""
    + "<!doctype html><html><head><meta charset='utf-8'/>"
    + "<title>SDLC Auto Gov Load Test</title>"
    + "<style>body{font:14px/1.4 -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;margin:20px}"
    + "table{border-collapse:collapse;margin:10px 0}td,th{border:1px solid #ddd;padding:6px 10px}</style>"
    + "</head><body>"
    + "<h1>SDLC Auto Gov Load Test — " + new Date().toISOString().slice(0,19).replace("T"," ") + "</h1>"
    + "<table>"
    + "<tr><th>Checks (pass/fail)</th><td>" + checks.passes + " / " + checks.fails + "</td></tr>"
    + "<tr><th>Requests</th><td>" + httpReqs + " total</td></tr>"
    + "<tr><th>Latency p(95)</th><td>" + number(lat["p(95)"]) + " ms</td></tr>"
    + "<tr><th>Latency avg / min / max</th><td>" + number(lat.avg) + " ms / " + number(lat.min) + " ms / " + number(lat.max) + " ms</td></tr>"
    + "<tr><th>Duration</th><td>" + secs(durMs/1000) + "</td></tr>"
    + "</table>"
    + "<h2>Raw JSON (truncated)</h2>"
    + "<pre style='white-space:pre-wrap'>" + JSON.stringify({ metrics:Object.keys(data.metrics||{}).slice(0,10), state:data.state }, null, 2) + "</pre>"
    + "</body></html>";

  // 3) write files (strings only; no content_type wrapper on k6 v0.46)
  return {
    stdout: text,
    "perf/k6/reports/summary.html": html,
    "perf/k6/reports/summary.json": JSON.stringify(data, null, 2)
  };
}

// If you ever need the named export form instead:
// export { handleSummary };
