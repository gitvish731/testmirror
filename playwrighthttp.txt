// perf/k6/vendor/accumulator.js
/* eslint-disable */

// --- Global singleton (works even if required from different paths/files) ---
var G = (typeof globalThis !== 'undefined') ? globalThis : this;
if (!G.__ACC_SINGLETON__) {
  G.__ACC_SINGLETON__ = { store: Object.create(null) };
}
var STORE = G.__ACC_SINGLETON__.store;

// Cap samples per endpoint to avoid memory blowups
var CAP = 2000;

function ensure(feat, ep) {
  if (!feat) feat = 'unknown_feature';
  if (!ep) ep = 'unknown_endpoint';
  if (!STORE[feat]) STORE[feat] = Object.create(null);
  if (!STORE[feat][ep]) {
    STORE[feat][ep] = { durs: [], count: 0, ok: 0, min: null, max: null, sum: 0 };
  }
  return STORE[feat][ep];
}

function add(feat, ep, ms, passed) {
  var node = ensure(feat, ep);
  node.count += 1;
  if (passed) node.ok += 1;
  var x = Number(ms) || 0;
  node.sum += x;
  if (node.min === null || x < node.min) node.min = x;
  if (node.max === null || x > node.max) node.max = x;
  if (node.durs.length < CAP) node.durs.push(x);
}

function snapshot() {
  return STORE;
}

module.exports = { add: add, snapshot: snapshot };

//----------------------------------------------------

// inside handleSummary.js
var acc = require('./accumulator.js');

function handleSummary(data) {
  // ...
  var snap = acc.snapshot();
  var feats = Object.keys(snap);
  console.log(`[k6] handleSummary: features seen in accumulator = ${feats.length} -> ${feats.join(', ')}`);
  // ...
}
