/* eslint-disable no-undef */
// k6 runner for endpoints generated from Playwright specs (HTTP-only)

const http = require('k6/http');
const { check, sleep, Trend, Counter } = require('k6');

// -------------------------------
// Env helpers (defaults are safe)
// -------------------------------
const ENV = (k => ({
  FEATURES: (k.FEATURES || '').trim(),        // comma-separated display names from the JSON (case-insensitive)
  ENDPOINT_FILTER: (k.ENDPOINT_FILTER || '').trim(), // substring match on endpoint name
  BASE_URL: (k.BASE_URL || '').trim(),        // e.g. https://api.dev.example.com
  TOKEN: (k.TOKEN || k.GRAFEAS_LOGIN_TOKEN || '').trim(),
  RPS: Number(k.RPS || 1),
  DURATION: (k.DURATION || '30s').trim(),
  PREALLOC: Number(k.PREALLOC || 5),
  MAXVUS: Number(k.MAXVUS || 35),
}))(__ENV);

// ---------------------------------
// Load endpoints map (generated)
// ---------------------------------
// Prefer JSON file (fast), fallback to JS module if ever needed.
const ENDPOINTS_BY_FEATURE = JSON.parse(open('../sources/endpoints.byFeature.json'));

// ---------------------------------
// Small utils
// ---------------------------------
function slug(s) {
  return String(s || '')
    .toLowerCase()
    .replace(/[^a-z0-9_]+/g, '_')
    .replace(/^_+|_+$/g, '');
}

function buildHeaders(method) {
  const h = { 'Content-Type': 'application/json' };
  if (ENV.TOKEN) h.Authorization = `Bearer ${ENV.TOKEN}`;
  // allow method-specific tweaks if ever needed
  return h;
}

function overrideBase(url) {
  if (!ENV.BASE_URL) return url;
  try {
    const u = new URL(url);
    const b = new URL(ENV.BASE_URL);
    u.protocol = b.protocol;
    u.host = b.host;
    return u.toString();
  } catch (_) {
    return url;
  }
}

// ---------------------------------
// Select features & endpoints list
// ---------------------------------
const SELECTED_FEATURES =
  (ENV.FEATURES ? ENV.FEATURES.split(',').map(s => s.trim()).filter(Boolean) : [])
    .map(x => x.toLowerCase());

const ENDPOINT_FILTER = ENV.ENDPOINT_FILTER.toLowerCase();

const ALL_FEATURE_NAMES = Object.keys(ENDPOINTS_BY_FEATURE);

function featureSelected(name) {
  if (SELECTED_FEATURES.length === 0) return true;
  return SELECTED_FEATURES.indexOf(String(name).toLowerCase()) !== -1;
}

const ENDPOINTS = [];
for (const featureName of ALL_FEATURE_NAMES) {
  if (!featureSelected(featureName)) continue;
  const eps = ENDPOINTS_BY_FEATURE[featureName] || [];
  for (const ep of eps) {
    if (ENDPOINT_FILTER && String(ep.name || '').toLowerCase().indexOf(ENDPOINT_FILTER) === -1) {
      continue;
    }
    ENDPOINTS.push({ feature: featureName, ...ep });
  }
}

if (!ENDPOINTS.length) {
  console.log('No endpoints selected. Check FEATURES=', ENV.FEATURES, ' and ENDPOINT_FILTER=', ENV.ENDPOINT_FILTER);
}

// ---------------------------------
// Per-endpoint custom metrics
// ---------------------------------
const __CUSTOM_METRICS = {}; // name -> metric

for (const ep of ENDPOINTS) {
  const id = slug(ep.feature) + '__' + slug(ep.name || ep.url || 'endpoint');
  ep.__metricReqs = 'reqs_ep_' + id;
  ep.__metricTime = 'time_ep_' + id;

  if (!__CUSTOM_METRICS[ep.__metricReqs]) {
    __CUSTOM_METRICS[ep.__metricReqs] = new Counter(ep.__metricReqs);
  }
  if (!__CUSTOM_METRICS[ep.__metricTime]) {
    __CUSTOM_METRICS[ep.__metricTime] = new Trend(ep.__metricTime);
  }
}

// ---------------------------------
// k6 options (single CAR scenario)
// ---------------------------------
export const options = {
  scenarios: {
    default: {
      executor: 'constant-arrival-rate',
      rate: Math.max(1, ENV.RPS),
      timeUnit: '1s',
      duration: ENV.DURATION,
      preAllocatedVUs: Math.max(1, ENV.PREALLOC),
      maxVUs: Math.max(1, ENV.MAXVUS),
      exec: 'default',
    },
  },
  thresholds: {
    // feel free to adjust/remove
    http_req_failed: ['rate<0.05'],
    http_req_duration: ['p(95)<60000'], // 60s
  },
  // we keep tags clean; reporter uses custom metrics above
};

// round-robin pointer
let __idx = 0;

// ---------------------------------
// Main iteration
// ---------------------------------
export function default() {
  if (!ENDPOINTS.length) {
    sleep(0.2);
    return;
  }
  const ep = ENDPOINTS[(__idx++ % ENDPOINTS.length)];

  const url = overrideBase(ep.url);
  const headers = buildHeaders(ep.method || 'GET');
  const tags = { feature: ep.feature, endpoint: ep.name || ep.url };

  let res;
  try {
    const method = String((ep.method || 'GET')).toUpperCase();
    if (method === 'GET') {
      res = http.get(url, { headers, tags });
    } else if (method === 'POST') {
      res = http.post(url, ep.body || null, { headers, tags });
    } else if (method === 'PUT') {
      res = http.put(url, ep.body || null, { headers, tags });
    } else if (method === 'PATCH') {
      res = http.patch(url, ep.body || null, { headers, tags });
    } else if (method === 'DELETE') {
      res = http.del(url, null, { headers, tags });
    } else {
      // unknown -> GET
      res = http.get(url, { headers, tags });
    }

    // push custom per-endpoint metrics
    __CUSTOM_METRICS[ep.__metricReqs].add(1);
    __CUSTOM_METRICS[ep.__metricTime].add(res.timings.duration);

    // checks
    const expectStatus = (ep.expect && ep.expect.status) ? Number(ep.expect.status) : 200;
    const mustContain = (ep.expect && ep.expect.text) ? String(ep.expect.text) : null;

    check(res, {
      'status ok': (r) => r.status === expectStatus,
      'body has text': (r) => {
        if (!mustContain) return String(r.body || '').length > 0;
        return String(r.body || '').indexOf(mustContain) !== -1;
      },
    }, tags);
  } catch (e) {
    // still count the request for visibility, and add a large duration to show as slow
    __CUSTOM_METRICS[ep.__metricReqs].add(1);
    __CUSTOM_METRICS[ep.__metricTime].add(60000);
    console.error(`Request error for ${ep.feature} / ${ep.name}: ${String(e)}`);
  }

  // small think time; CAR controls throughput anyway
  sleep(0.01);
}

// ---------------------------------
// Summary -> vendor HTML
// ---------------------------------
export function handleSummary(data) {
  // IMPORTANT: keep the relative path correct
  return require('../vendor/handleSummary.js')(data);
}
