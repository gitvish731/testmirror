// perf/k6/vendor/handleSummary.js
// Robust, zero-dependency HTML summary for k6 v0.46+
// Reads directly from data.metrics with defensive lookups.

function val(obj, path, dflt) {
  try {
    const v = path.split('.').reduce((o, k) => (o == null ? undefined : o[k]), obj);
    return v == null ? dflt : v;
  } catch {
    return dflt;
  }
}

function fmtNumber(n) {
  return (n || 0).toLocaleString('en-US');
}
function fmtMs(n) {
  const v = Number(n || 0);
  return `${v.toFixed(2)} ms`;
}

function pickMetrics(data) {
  const m = data.metrics || {};

  // requests
  const reqCount = val(m, 'http_reqs.values.count', 0);

  // iterations
  const iterCount = val(m, 'iterations.values.count', 0);

  // checks
  const checksPass = val(m, 'checks.values.passes', 0);
  const checksFail = val(m, 'checks.values.fails', 0);

  // latency
  const p95 =
    val(m, 'http_req_duration.values["p(95)"]', null) ??
    val(m, 'http_req_duration.values.p95', 0);
  const p90 =
    val(m, 'http_req_duration.values["p(90)"]', null) ??
    val(m, 'http_req_duration.values.p90', 0);
  const p99 =
    val(m, 'http_req_duration.values["p(99)"]', null) ??
    val(m, 'http_req_duration.values.p99', 0);
  const avg = val(m, 'http_req_duration.values.avg', 0);
  const min = val(m, 'http_req_duration.values.min', 0);
  const max = val(m, 'http_req_duration.values.max', 0);

  // vus
  const vusMax = val(m, 'vus_max.values.value', 0);

  return {
    reqCount,
    iterCount,
    checksPass,
    checksFail,
    latency: { p95, p90, p99, avg, min, max },
    vusMax,
  };
}

function escapeHtml(s) {
  return String(s)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}

export default function handleSummary(data) {
  const now = new Date();
  const when = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(
    now.getDate()
  ).padStart(2, '0')} ${String(now.getHours()).padStart(2, '0')}:${String(
    now.getMinutes()
  ).padStart(2, '0')}:${String(now.getSeconds()).padStart(2, '0')}`;

  const m = pickMetrics(data);

  // Simple “sparkline” (ASCII) for latency distribution, purely cosmetic
  function bar(value, max) {
    const width = 40;
    const ratio = max > 0 ? Math.min(1, value / max) : 0;
    const filled = Math.max(0, Math.round(ratio * width));
    return '▮'.repeat(filled) + '▯'.repeat(width - filled);
  }
  const lmax = Math.max(m.latency.max || 0, m.latency.p99 || 0, m.latency.p95 || 0);

  const head = `
<!doctype html>
<html>
<head>
  <meta charset="utf-8"/>
  <title>SDLC Auto Gov Load Test – ${escapeHtml(when)}</title>
  <style>
    body{font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Inter,Arial,sans-serif;margin:24px;color:#111}
    h1{font-size:22px;margin:0 0 12px}
    table{border-collapse:collapse;width:640px;margin:12px 0}
    th,td{border:1px solid #ddd;padding:8px;text-align:left}
    th{background:#f6f7f9}
    .ok{color:#0a8}
    .warn{color:#d90}
    .bad{color:#c33}
    pre{background:#fafafa;border:1px solid #eee;padding:12px;overflow:auto;max-height:360px}
    .mono{font-family:ui-monospace,SFMono-Regular,Menlo,Consolas,monospace}
    .bar{font-family:ui-monospace,SFMono-Regular,Menlo,Consolas,monospace;white-space:pre}
  </style>
</head>
<body>
<h1>SDLC Auto Gov Load Test – ${escapeHtml(when)}</h1>
`;

  const summaryTable = `
<table>
  <tr><th>Checks (pass/fail)</th><td>${fmtNumber(m.checksPass)} / ${fmtNumber(m.checksFail)}</td></tr>
  <tr><th>Requests</th><td>${fmtNumber(m.reqCount)} total</td></tr>
  <tr><th>Iterations</th><td>${fmtNumber(m.iterCount)}</td></tr>
  <tr><th>Latency p95</th><td>${fmtMs(m.latency.p95)}</td></tr>
  <tr><th>VUs max</th><td>${fmtNumber(m.vusMax)}</td></tr>
</table>
`;

  const latencyBlock = `
<h3>Latency (http_req_duration)</h3>
<table>
  <tr><th>avg</th><td>${fmtMs(m.latency.avg)}</td></tr>
  <tr><th>p90</th><td class="mono">${fmtMs(m.latency.p90)} <span class="bar">${bar(
    m.latency.p90,
    lmax
  )}</span></td></tr>
  <tr><th>p95</th><td class="mono">${fmtMs(m.latency.p95)} <span class="bar">${bar(
    m.latency.p95,
    lmax
  )}</span></td></tr>
  <tr><th>p99</th><td class="mono">${fmtMs(m.latency.p99)} <span class="bar">${bar(
    m.latency.p99,
    lmax
  )}</span></td></tr>
  <tr><th>min / max</th><td>${fmtMs(m.latency.min)} / ${fmtMs(m.latency.max)}</td></tr>
</table>
`;

  const raw = `
<h3>Raw JSON (truncated)</h3>
<pre>${escapeHtml(JSON.stringify(data, null, 2)).slice(0, 120000)}</pre>
</body></html>`;

  const html = head + summaryTable + latencyBlock + raw;

  return {
    'stdout': '', // keep console quiet
    'perf/k6/reports/summary.html': html,
  };
}
