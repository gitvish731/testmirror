// perf/k6/vendor/handleSummary.js  (pure ESM, k6 v0.46-safe)
import { snapshot } from "./acc.js";

function fmtMs(n) {
  const v = Math.round(Number(n) || 0);
  return v + " ms";
}

function table(rows) {
  // rows: array of arrays of strings
  const cells = rows
    .map(
      (r) =>
        "<tr>" +
        r.map((c) => `<td style="padding:6px;border:1px solid #e5e7eb;">${c}</td>`).join("") +
        "</tr>"
    )
    .join("");
  return `<table style="border-collapse:collapse;font-family:system-ui,Segoe UI,Arial;font-size:14px;">${cells}</table>`;
}

function sectionTitle(txt) {
  return `<h3 style="margin:24px 0 8px 0;font-family:system-ui,Segoe UI,Arial;">${txt}</h3>`;
}

export default function handleSummary(data) {
  const acc = snapshot(); // { byFeature, byEndpoint }

  // Top banner so you can see the custom summary ran
  let html = `
<!doctype html><meta charset="utf-8">
<title>SDLC Auto Gov Load Test</title>
<div style="font-family:system-ui,Segoe UI,Arial;padding:16px 20px;">
  <h1 style="margin:0 0 8px 0;">SDLC Auto Gov Load Test â€” ${new Date().toISOString().replace('T',' ').slice(0,19)}</h1>
  <div style="color:#374151;margin-bottom:16px;">Custom summary active</div>
`;

  // Feature breakdown
  html += sectionTitle("Feature breakdown");
  const fRows = [["Feature", "Requests", "Avg latency"]];
  const fKeys = Object.keys(acc.byFeature || {});
  if (fKeys.length === 0) {
    html += `<div style="color:#6b7280">No feature data recorded.</div>`;
  } else {
    for (const f of fKeys) {
      const v = acc.byFeature[f];
      fRows.push([f, String(v.count), fmtMs(v.avg)]);
    }
    html += table(fRows);
  }

  // Endpoint breakdown
  html += sectionTitle("Endpoint breakdown");
  const eKeys = Object.keys(acc.byEndpoint || {});
  if (eKeys.length === 0) {
    html += `<div style="color:#6b7280">No endpoint data recorded.</div>`;
  } else {
    // one table per feature for readability
    for (const f of eKeys) {
      html += `<h4 style="margin:16px 0 6px 0;">${f}</h4>`;
      const epMap = acc.byEndpoint[f] || {};
      const epRows = [["Endpoint", "Requests", "Avg latency"]];
      for (const epName of Object.keys(epMap)) {
        const v = epMap[epName];
        epRows.push([epName, String(v.count), fmtMs(v.avg)]);
      }
      html += table(epRows);
    }
  }

  // Raw JSON (truncated here to just the ACC to keep file small)
  html += sectionTitle("Raw ACC (truncated)");
  html += `<pre style="background:#f9fafb;border:1px solid #e5e7eb;padding:8px;border-radius:6px;white-space:pre-wrap;">${JSON.stringify(
    acc,
    null,
    2
  )}</pre>`;

  html += "</div>";

  // Also emit a compact JSON bundle your pipelines can consume
  const outJson = {
    acc,
    options: data && data.options ? data.options : {},
  };

  return {
    stdout: "Custom summary active\n",
    "perf/k6/reports/summary.html": html,
    "perf/k6/reports/summary.json": JSON.stringify(outJson, null, 2),
  };
}
