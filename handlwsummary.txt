// perf/k6/vendor/handleSummary.js
// FINAL ONE-SHOT VERSION — shows Avg, p(95), Max (and Min if present)

function UNSLUG(s) {
  return String(s || "").replace(/__/g, " :: ").replace(/_/g, " ").trim();
}

export default function handleSummary(data) {
  var metrics = data && data.metrics ? data.metrics : {};
  var rows = [];

  // --- Extract endpoint-level metrics ---
  var keys = Object.keys(metrics);
  for (var i = 0; i < keys.length; i++) {
    var k = keys[i];
    if (k.indexOf("reqs_ep__") !== 0) continue;

    var tail = k.slice("reqs_ep__".length);
    var cntVals = metrics[k] && metrics[k].values ? metrics[k].values : {};
    var cnt = typeof cntVals.count === "number" ? cntVals.count : 0;

    var latKey = "lat_ep__" + tail;
    var latVals = metrics[latKey] && metrics[latKey].values ? metrics[latKey].values : {};

    var avg = typeof latVals.avg === "number" ? Math.round(latVals.avg) : 0;
    var p95 = typeof latVals["p(95)"] === "number" ? Math.round(latVals["p(95)"]) : 0;
    var max = typeof latVals.max === "number" ? Math.round(latVals.max) : 0;
    var min = typeof latVals.min === "number" ? Math.round(latVals.min) : 0;

    var parts = tail.split("__");
    var feat = UNSLUG(parts.shift() || "");
    var ep = UNSLUG(parts.join("__"));

    rows.push({
      feature: feat,
      endpoint: ep,
      requests: cnt,
      avg: avg,
      p95: p95,
      max: max,
      min: min,
    });
  }

  // --- Aggregate per feature ---
  var byFeature = {};
  for (var j = 0; j < rows.length; j++) {
    var r = rows[j];
    if (!byFeature[r.feature])
      byFeature[r.feature] = { requests: 0, avgSum: 0, endpoints: 0, p95Max: 0, maxMax: 0, minMin: 999999 };
    var agg = byFeature[r.feature];
    agg.requests += r.requests;
    agg.avgSum += r.avg;
    agg.endpoints++;
    if (r.p95 > agg.p95Max) agg.p95Max = r.p95;
    if (r.max > agg.maxMax) agg.maxMax = r.max;
    if (r.min < agg.minMin) agg.minMin = r.min;
  }

  var featRows = [];
  var fKeys = Object.keys(byFeature);
  for (var f = 0; f < fKeys.length; f++) {
    var fname = fKeys[f];
    var agg = byFeature[fname];
    featRows.push({
      feature: fname,
      requests: agg.requests,
      avg: agg.endpoints ? Math.round(agg.avgSum / agg.endpoints) : 0,
      p95: agg.p95Max,
      max: agg.maxMax,
      min: agg.minMin === 999999 ? 0 : agg.minMin,
    });
  }

  // --- HTML output ---
  var css =
    "body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,sans-serif;margin:24px}" +
    "h1{font-size:22px;margin:0 0 12px}" +
    "h2{font-size:16px;margin:24px 0 8px}" +
    "table{border-collapse:collapse;width:100%;max-width:960px}" +
    "th,td{border:1px solid #e0e0e0;padding:6px 8px;text-align:left;font-size:13px}" +
    "th{background:#fafafa}" +
    ".mono{font-family:ui-monospace, SFMono-Regular, Menlo, Consolas, monospace;color:#666}" +
    ".muted{color:#888}";

  var now = new Date();
  var titleTime = now.toISOString().replace("T", " ").slice(0, 19);
  var head =
    '<h1>Load Test — <span class="mono">' +
    titleTime +
    "</span></h1>" +
    '<div class="muted">Enhanced Summary Active (Avg / p95 / Max / Min)</div>';

  function makeTable(rows, cols) {
    if (!rows || !rows.length) return '<div class="muted">No data recorded.</div>';
    var th = "<tr>" + cols.map(function (c) { return "<th>" + c.title + "</th>"; }).join("") + "</tr>";
    var body = rows.map(function (r) {
      return (
        "<tr>" +
        cols.map(function (c) {
          var val = r[c.key];
          if (typeof val === "number") return "<td>" + val + (c.unit || "") + "</td>";
          return "<td>" + (val || "") + "</td>";
        }).join("") +
        "</tr>"
      );
    }).join("");
    return "<table><thead>" + th + "</thead><tbody>" + body + "</tbody></table>";
  }

  var featTbl = makeTable(featRows, [
    { title: "Feature", key: "feature" },
    { title: "Requests", key: "requests" },
    { title: "Avg latency", key: "avg", unit: " ms" },
    { title: "p(95)", key: "p95", unit: " ms" },
    { title: "Max latency", key: "max", unit: " ms" },
    { title: "Min latency", key: "min", unit: " ms" },
  ]);

  var epTbl = makeTable(rows, [
    { title: "Feature", key: "feature" },
    { title: "Endpoint", key: "endpoint" },
    { title: "Requests", key: "requests" },
    { title: "Avg latency", key: "avg", unit: " ms" },
    { title: "p(95)", key: "p95", unit: " ms" },
    { title: "Max latency", key: "max", unit: " ms" },
    { title: "Min latency", key: "min", unit: " ms" },
  ]);

  var html =
    "<!doctype html><meta charset='utf-8'><title>Gov Load Test</title>" +
    "<style>" +
    css +
    "</style><body>" +
    head +
    "<h2>Feature breakdown</h2>" +
    featTbl +
    "<h2>Endpoint breakdown</h2>" +
    epTbl +
    "</body>";

  // --- JSON output ---
  var json = {
    byFeature: featRows.reduce(function (acc, r) {
      acc[r.feature] = { requests: r.requests, avg: r.avg, p95: r.p95, max: r.max, min: r.min };
      return acc;
    }, {}),
    byEndpoint: rows,
  };

  return {
    stdout: "Enhanced summary active with Avg / p95 / Max / Min\n",
    "perf/k6/reports/summary.html": html,
    "perf/k6/reports/summary.json": JSON.stringify(json, null, 2),
  };
}
